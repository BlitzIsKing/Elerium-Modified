--// Jailbreak Auto Rob Source
--// Script by blitzisking#0

--// Settings and Essentials

local Settings = {
    player_speed = 3, -- max: 5
    car_speed = 10, -- max: 15
    heli_speed = 50, -- max: 75

    hideInDrops = false,

}

local y_level = 500
local home_level = 2000

local autoRobToggled = false
local dots = 0

--// UI

local library = loadstring(game:HttpGet("https://raw.githubusercontent.com/BlitzIsKing/Elerium-Modified/main/Library"))()

local Window = library:AddWindow("Jailbreak Auto-Rob", {
    main_color = Color3.fromRGB(39, 145, 60),
    min_size = Vector2.new(400, 365),
    toggle_key = Enum.KeyCode.T,
    can_resize = false,
})

local Main = Window:AddTab("Main")
local SettingsTab = Window:AddTab("Settings")
local Robberies = Window:AddTab("Statuses")
local Credits = Window:AddTab("Credits")

--// Main Tab

local Status = Main:AddLabel("Loading")

local AutoRobToggle = Main:AddSwitch("Auto Rob", function(value)
    autoRobToggled = value
end)

local RobSmallStores = Main:AddSwitch("Rob Small Stores", function(value)
    Robbery.Donut.Enabled = value
    Robbery.Gas.Enabled = value
end)

local CopyDiscordInvite = Main:AddButton("Copy Discord Invite", function()
    setclipboard("discord.gg/QAz5BnCuFd")
end)

local MoneyEarned = Main:AddLabel("Money Earned: $0")
local ElapsedTime = Main:AddLabel("Elapsed Time: 0h/0m")

--// Settings Tab

local HideInAirdrops = SettingsTab:AddSwitch("Hide in Airdrops", function(value)
    Settings.hideInDrops = value
end)

local PlayerSpeedSlider = SettingsTab:AddSlider("Teleport Player Speed", function(value)
    Settings.player_speed = value
end, {
    ["min"] = 1,
    ["max"] = 5,
})

local CarSpeedSlider = SettingsTab:AddSlider("Teleport Car Speed", function(value)
    Settings.car_speed = value
end, {
    ["min"] = 5,
    ["max"] = 15,
})

local HeliSpeedSlider = SettingsTab:AddSlider("Teleport Helicopter Speed", function(value)
    Settings.heli_speed = value
end, {
    ["min"] = 15,
    ["max"] = 75,
})

RobSmallStores:Set(true)

HideInAirdrops:Set(false)
PlayerSpeedSlider:Set(3)
CarSpeedSlider:Set(10)
HeliSpeedSlider:Set(50)

--// UI Functions

function ChangeStatus(text)
    Status.Text = text
end

--// Other Essentials

local platform = Instance.new("Part")
platform.CFrame = CFrame.new(0, 0, 0)
platform.Size = Vector3.new(150, 5, 150)
platform.Name = "ProtectPlatform"
platform.Anchored = true
platform.CanCollide = true
platform.Parent = game:GetService("Workspace")

task.spawn(function()
    while task.wait(0.01) do
        if Arrested() then
            Halt = true
            repeat 
                task.wait() 
            until Arrested() == false
            task.wait(.5)
            game:GetService("Players").LocalPlayer.Character:FindFirstChild("Humanoid").Health = 0
            task.wait(.5)
            if game:GetService("Players").LocalPlayer.Character:FindFirstChild("Humanoid").Health == 0 then
                repeat task.wait() until game:GetService("Players").LocalPlayer.Character and game:GetService("Players").LocalPlayer.Character:FindFirstChild("Humanoid") and game:GetService("Players").LocalPlayer.Character:FindFirstChild("Humanoid").Health ~= 0
                task.wait(1)
                Halt = false
            end
        elseif game:GetService("Players").LocalPlayer.Character:FindFirstChild("Humanoid").Health == 0 then
            Halt = true
            repeat task.wait() until game:GetService("Players").LocalPlayer.Character and game:GetService("Players").LocalPlayer.Character:FindFirstChild("Humanoid") and game:GetService("Players").LocalPlayer.Character:FindFirstChild("Humanoid").Health ~= 0
            task.wait(1)
            if Raycast(game:GetService("Players").LocalPlayer.Character.PrimaryPart.Position, Vector3.new(0, y_level, 0)) then
                Middle()
            end
            task.wait()
            Halt = false
        end
    end
end)

local modifiedParts = {}

local disableTouch = function()
	for k, part in pairs(game:GetService("Workspace"):GetDescendants()) do
		if not modifiedParts[part] then
			if part.Name == "TouchInterest" then
				if part.Parent then
					local parentName = part.Parent.Name
					local grandparentName = part.Parent.Parent and part.Parent.Parent.Name
					if parentName ~= "LaserTouch" and parentName ~= "TriggerDoor" and parentName ~= "TouchToEnter" and parentName ~= "HatchTouch" and parentName ~= "TriggerFoundBossRoom" and parentName ~= "Touch" and parentName ~= "Teleporter" and grandparentName ~= "ExitDoor" then 
						part.Parent:GetAttributeChangedSignal("CanTouch"):Connect(function()
							part.Parent.CanTouch = false
						end)
						part.Parent.CanTouch = false
						modifiedParts[part] = true
					end
				end
			end
		end
	end
end

--// Disable Mansion Boss Attacks
require(game:GetService("ReplicatedStorage").MansionRobbery.BossNPCBinder)._constructor.PlayArmGrab = require(game:GetService("ReplicatedStorage").Std.Maid).new()
require(game:GetService("ReplicatedStorage").MansionRobbery.BossNPCBinder)._constructor.PlayMansionLasers = require(game:GetService("ReplicatedStorage").Std.Maid).new()
require(game:GetService("ReplicatedStorage").MansionRobbery.BossNPCBinder)._constructor.PlayAuraBlast = require(game:GetService("ReplicatedStorage").Std.Maid).new()
require(game:GetService("ReplicatedStorage").MansionRobbery.BossNPCBinder)._constructor.PlayLaserSweepVisual = require(game:GetService("ReplicatedStorage").Std.Maid).new()
require(game:GetService("ReplicatedStorage").MansionRobbery.BossNPCBinder)._constructor.PlayMansionCameras = require(game:GetService("ReplicatedStorage").Std.Maid).new()

--// Disable projectiles
require(game:GetService("ReplicatedStorage"):WaitForChild("Game").MilitaryTurret.MilitaryTurret)._fire = function() end
require(game:GetService("ReplicatedStorage"):WaitForChild("Game").DartDispenser.DartDispenser)._fire = function() end
--require(game:GetService("ReplicatedStorage"):WaitForChild("Game").Robbery.CargoShip.Turret).Shoot = function() end

--// Disable oil rig turrets
if workspace.OilRig:FindFirstChild("Turrets") then
	workspace.OilRig:FindFirstChild("Turrets"):Destroy()
end

local Cars = {
    "Camaro",
    "Jeep",
}

local Helis = {
    "Heli",
}

local Vehs = {
    "Camaro",
    "Jeep",
    "Heli",
}

--// Services

local replicated_storage = game:GetService("ReplicatedStorage")

local Modules = {
    Vehicle = require(replicated_storage.Vehicle.VehicleUtils),
    DefaultActions = require(replicated_storage.Game.DefaultActions),
    ItemSystem = require(replicated_storage.Game.ItemSystem.ItemSystem),
    GunItem = require(replicated_storage.Game.Item.Gun),
    PlayerUtils = require(replicated_storage.Game.PlayerUtils),
    CharUtils = require(replicated_storage.Game.CharacterUtil),
    Raycast = require(replicated_storage.Module.RayCast),
    UI = require(replicated_storage.Module.UI),
    GunShopUI = require(replicated_storage.Game.GunShop.GunShopUI),
    GunShopUtils = require(replicated_storage.Game.GunShop.GunShopUtils),
    RobberyConsts = require(replicated_storage.Robbery.RobberyConsts),
    NpcShared = require(replicated_storage.GuardNPC.GuardNPCShared),
    Npc = require(replicated_storage.NPC.NPC),
    SafeConsts = require(replicated_storage.Safes.SafesConsts),
    MansionUtils = require(replicated_storage.MansionRobbery.MansionRobberyUtils),
    BossConsts = require(replicated_storage.MansionRobbery.BossNPCConsts),
    BulletEmitter = require(replicated_storage.Game.ItemSystem.BulletEmitter),
    Store = require(replicated_storage.App.store),
    TagUtils = require(replicated_storage.Tag.TagUtils),
    TeamChooseUI = require(replicated_storage.Game.TeamChooseUI)
}

GetVehicleModel = Modules.Vehicle.GetLocalVehicleModel
GetVehiclePacket = Modules.Vehicle.GetLocalVehiclePacket

local Vehicles = game:GetService("Workspace").Vehicles
local Trains = workspace:WaitForChild("Trains")
local VehicleSpawns  = workspace:WaitForChild("VehicleSpawns", 9999)

local RaycastParams = RaycastParams.new()
RaycastParams.IgnoreWater = true

local RaycastIgnorable    = {
    "Rain",
    "RainFall",
    "RainSnow",
    "Plane",
    "Items",
	"DirtRoad"
}

local RaycastIgnoreList	= {
    Vehicles,
    VehicleSpawns,
    Trains
}

local door_positions = {}

function Raycast(Start, Direction, characterToIgnore)
	if characterToIgnore then
		RaycastIgnoreList[#RaycastIgnoreList + 1] = characterToIgnore
	end
	RaycastParams.FilterDescendantsInstances = RaycastIgnoreList

	return workspace:Raycast(Start, Direction, RaycastParams)
end

function SetChar(plrChar)
	RaycastIgnoreList[#RaycastIgnoreList + 1] = plrChar
end

if game:GetService("Players").LocalPlayer.Character and game:GetService("Players").LocalPlayer.Character:FindFirstChild("Humanoid") then
	SetChar(game:GetService("Players").LocalPlayer.Character)
end

game:GetService("Players").LocalPlayer.CharacterAdded:Connect(SetChar, game:GetService("Players").LocalPlayer.Character)

-- Function to handle the ChildAdded event
function OnChildAdded(Child)
	if table.find(RaycastIgnorable, Child.Name) then
        RaycastIgnoreList[#RaycastIgnoreList + 1] = Child
    end
end

function OnChildRemoved(Child)
	if table.find(RaycastIgnorable, Child.Name) then
        table.remove(RaycastIgnoreList, table.find(RaycastIgnoreList, Child))
    end
end

-- Connect the ChildAdded event to the function
workspace.ChildAdded:Connect(OnChildAdded)
workspace.ChildRemoved:Connect(OnChildRemoved)

for i,v in pairs(workspace:GetChildren()) do
    OnChildAdded(v)
end

for i,v in pairs(game:GetService("CollectionService"):GetTagged("Tree")) do
    RaycastIgnoreList[#RaycastIgnoreList + 1] = v
end
for i,v in pairs(game:GetService("CollectionService"):GetTagged("NoClipAllowed")) do
    RaycastIgnoreList[#RaycastIgnoreList + 1] = v
end

RaycastParams.FilterType = Enum.RaycastFilterType.Exclude

--// Robbery Statuses

local function WaitForReward()
	if game:GetService("Players").LocalPlayer.PlayerGui.AppUI:FindFirstChild("RewardSpinner") then
		repeat 
			task.wait() 
		until not game:GetService("Players").LocalPlayer.PlayerGui.AppUI:FindFirstChild("RewardSpinner")
	end
	return true
end

function IsShipOutOfMap()
    local Ship = workspace:FindFirstChild("CargoShip")
    return not Ship or (Ship.PrimaryPart.Position.X < -3187 and Ship.PrimaryPart.Position.Z < 503)
end

function IsPlaneOutOfMap()
    local Plane = workspace:FindFirstChild("Plane")
    return not Plane or Plane.PrimaryPart.Position.Z < -5000
end

function IsCargoTrainOutOfMap(Gold)
    return Gold.Position.X < -1663 and Gold.Position.Z > 258
end

function GetNearestAirdrop()
    if Halt then
        return
    end

    local NearestAirdrop, NearestDistance = nil, 9e9

    for i,v in pairs(game:GetService("CollectionService"):GetTagged("Briefcase")) do
        RaycastIgnoreList[#RaycastIgnoreList + 1] = v

        if v:FindFirstChild("Root") and v:GetAttribute("BriefcaseCollected") == false then
            local Distance = DistanceXZ(game:GetService("Players").LocalPlayer.Character.Position, v.Root.Position)
            if Distance < NearestDistance then
                NearestAirdrop, NearestDistance = v, Distance
            end
        end
    end

    return NearestAirdrop
end

function CheckPlaneCrates()
    if not workspace:FindFirstChild("Plane") or not workspace.Plane:FindFirstChild("Crates") then
        return false
    end

    local PlaneCrates = {
        "Crate1",
        "Crate2",
        "Crate3",
        "Crate4",
        "Crate5",
    }

    for i,v in pairs(PlaneCrates) do
        if workspace.Plane.Crates:FindFirstChild(v) and workspace.Plane.Crates:FindFirstChild(v)['1'].Transparency < 1 then
            return true
        end
    end

    return false
end

function GetCargoTrainBoxCar()
    local CargoTrainBoxCars = {
        "BoxCar",
        "BoxCar2",
        "BoxCar3",
        "BoxCar4",
        "BoxCar5"
    }

    for i,v in pairs(CargoTrainBoxCars) do
        if Trains:FindFirstChild(v) then
            return Trains:FindFirstChild(v)
        end
    end
end

function CheckCargoShip()
    return Robbery.CargoShip.Open and not IsShipOutOfMap()
end
function CheckMansion()
    return Robbery.Mansion.Open and game:GetService("Players").LocalPlayer.Folder:FindFirstChild("MansionInvite")
end
function CheckAirdrop()
    return GetNearestAirdrop()
end
function CheckPowerPlant()
    return Robbery.PowerPlant.Open
end
function CheckGasStation()
    return Robbery.Gas.Open
end
function CheckDonutStore()
    return Robbery.Donut.Open
end
function CheckCargoPlane()
    return Robbery.CargoPlane.Open and workspace:FindFirstChild("Plane") and workspace.Plane.PrimaryPart.Position.Y > 200 and CheckPlaneCrates() and not IsPlaneOutOfMap()
end
function CheckJewelry()
    return Robbery.Jewelry.Open
end
function CheckBank()
    return Robbery.Bank.Open
end
function CheckMuseum()
    return Robbery.Museum.Open
end
function CheckCargoTrain()
    return Robbery.CargoTrain.Open and GetCargoTrainBoxCar() and not IsCargoTrainOutOfMap(GetCargoTrainBoxCar().Model.Rob.Gold)
end
function CheckPassengerTrain()
    return Robbery.PassengerTrain.Open
end
function CheckCasino()
    return Robbery.Casino.Open
end
function CheckTomb()
    return Robbery.Tomb.Open
end

local OnOpen = Instance.new("BindableEvent")

Robbery = setmetatable({
    Bank = {
        id = Modules.RobberyConsts.ENUM_ROBBERY.BANK,
        Open = false,
        Enabled = true,
    },
    Jewelry = {
        id = Modules.RobberyConsts.ENUM_ROBBERY.JEWELRY,
        Open = false,
        Enabled = true,
    },
    Museum = {
        id = Modules.RobberyConsts.ENUM_ROBBERY.MUSEUM,
        Open = false,
        Enabled = true,
    },
    PowerPlant = {
        id = Modules.RobberyConsts.ENUM_ROBBERY.POWER_PLANT,
        Open = false,
        Enabled = true,
    },
    PassengerTrain = {
        id = Modules.RobberyConsts.ENUM_ROBBERY.TRAIN_PASSENGER,
        Open = false,
        Enabled = true,
    },
    CargoTrain = {
        id = Modules.RobberyConsts.ENUM_ROBBERY.TRAIN_CARGO,
        Open = false,
        Enabled = true,
    },
    CargoShip = {
        id = Modules.RobberyConsts.ENUM_ROBBERY.CARGO_SHIP,
        Open = false,
        Enabled = true,
    },
    CargoPlane = {
        id = Modules.RobberyConsts.ENUM_ROBBERY.CARGO_PLANE,
        Open = false,
        Enabled = true,
    },
    Donut = {
        id = Modules.RobberyConsts.ENUM_ROBBERY.STORE_DONUT,
        Open = false,
        Enabled = true,
    },
    Gas = {
        id = Modules.RobberyConsts.ENUM_ROBBERY.STORE_GAS,
        Open = false,
        Enabled = true,
    },
    Tomb = {
        id = Modules.RobberyConsts.ENUM_ROBBERY.TOMB,
        Open = false,
        Enabled = true,
    },
    Casino = {
        id = Modules.RobberyConsts.ENUM_ROBBERY.CASINO,
        Open = false,
        Enabled = true,
    },
    Mansion = {
        id = Modules.RobberyConsts.ENUM_ROBBERY.MANSION,
        Open = false,
        Enabled = true,
    },
    Airdrop = {
        Enabled = true,
    }
}, {
	__index = {
		OnOpen = {
			Fire = function(self, ...)
				OnOpen:Fire(...)
			end,
			Connect = function(self, ...)
				OnOpen.Event:Connect(...)
			end
		}
	}
})

for i,v in pairs(replicated_storage:WaitForChild("RobberyState"):GetChildren()) do
    for i2,v2 in pairs(Robbery) do
        if v.Name == tostring(v2.id) then
            if i2 == "Museum" or i2 == "Tomb" then
                v2.Open = (v.Value == 2)
            elseif i2 == "Mansion" then
                v2.Open = (v.Value == 1)
            else
                v2.Open = (v.Value ~= 3)
            end

			Robbery.OnOpen:Fire(i2, v2.Open)

            v:GetPropertyChangedSignal("Value"):Connect(function()
                if i2 == "Museum" or i2 == "Tomb" then
                    v2.Open = (v.Value == 2)
                elseif i2 == "Mansion" then
                    v2.Open = (v.Value == 1)
                else
                    v2.Open = (v.Value ~= 3)
                end

				Robbery.OnOpen:Fire(i2, v2.Open)
            end)

            break
        end
    end
end

replicated_storage:WaitForChild("RobberyState").ChildAdded:Connect(function(v)
    for i2,v2 in pairs(Robbery) do
        if v.Name == tostring(v2.id) then
            if i2 == "Museum" or i2 == "Tomb" then
                v2.Open = (v.Value == 2)
            elseif i2 == "Mansion" then
                v2.Open = (v.Value == 1)
            else
                v2.Open = (v.Value ~= 3)
            end

            v:GetPropertyChangedSignal("Value"):Connect(function()
                if i2 == "Museum" or i2 == "Tomb" then
                    v2.Open = (v.Value == 2)
                elseif i2 == "Mansion" then
                    v2.Open = (v.Value == 1)
                else
                    v2.Open = (v.Value ~= 3)
                end
            end)

            break
        end
    end
end)

local GetBuilding = function()
    for i, v in pairs(workspace:GetDescendants()) do
        if v:IsA("BasePart") and v.CFrame == CFrame.new(274.473419, 35.3500443, 853.257324, 0.981609404, 0.190900385, -5.88595867e-06, 5.88595867e-06, -6.10351562e-05, -0.99999994, -0.190900385, 0.981609404, -6.10351562e-05) then
            return v
        end
    end
end

--// Teleport System

--// No Fall Damage or Ragdoll 

local paraglide = require(game:GetService("ReplicatedStorage").Game.Paraglide)
 
local old_is_point_in_tag = Modules.PlayerUtils.isPointInTag;
Modules.PlayerUtils.isPointInTag = function(point, tag)
    if tag == "NoRagdoll" or tag == "NoFallDamage" then
        return true;
    end;
 
    return old_is_point_in_tag(point, tag);
end;
 
--// Anti-Skydive
 
local oldIsFlying = paraglide.IsFlying
paraglide.IsFlying = function(...)
    if getinfo(2, "s").source:find("Falling") then
        return true
    end
 
    return oldIsFlying(...)
end

function LagCheck(part)
	local ShouldStop = false
	local OldPosition = part.Position
	local Signal = part:GetPropertyChangedSignal("CFrame"):Connect(function()
        if (part.Position - OldPosition).Magnitude > 10 then
            LaggedBack = true
            task.delay(0.2, function()
                LaggedBack = false
            end)
        end
    end)
	task.spawn(function()
		while part and ShouldStop == false do
			OldPosition = part.Position
			task.wait()
		end
	end)
	return {
		Stop = function()
			ShouldStop = true
			Signal:Disconnect()
		end
	}
end

function DistanceXZ(firstPos, secondPos)
	local XZVector = Vector3.new(firstPos.X, 0, firstPos.Z) - Vector3.new(secondPos.X, 0, secondPos.Z)
	return XZVector.Magnitude 
end

function Middle()
	repeat
		if (game:GetService("Players").LocalPlayer.Character.PrimaryPart.Position - Vector3.new(40.4239235, -44.618969, 22.7029896)).Magnitude < 5 then
            break
        end
		game:GetService("Workspace").CurrentCamera.CameraType = Enum.CameraType.Fixed
		if (game:GetService("Players").LocalPlayer.Character.PrimaryPart.Position - Vector3.new(40.4239235, -44.618969, 22.7029896)).Magnitude < 5 then
            break
        end
		game:GetService("Players").LocalPlayer.Character:PivotTo(CFrame.new(60.32407, -44.618969, 22.7029724))
        if (game:GetService("Players").LocalPlayer.Character.PrimaryPart.Position - Vector3.new(40.4239235, -44.618969, 22.7029896)).Magnitude < 5 then
            break
        end
		task.wait()
        if (game:GetService("Players").LocalPlayer.Character.PrimaryPart.Position - Vector3.new(40.4239235, -44.618969, 22.7029896)).Magnitude < 5 then
            break
        end
	until (game:GetService("Players").LocalPlayer.Character.PrimaryPart.Position - Vector3.new(40.4239235, -44.618969, 22.7029896)).Magnitude < 5
	task.wait()
    game:GetService("Players").LocalPlayer.Character:PivotTo(CFrame.new(40.4239235, 20, 22.7029896))
	task.wait()
    game:GetService("Workspace").CurrentCamera.CameraType = Enum.CameraType.Custom
	task.wait(.15)
end

function FindD(tried)
    if Arrested() or Halt then
		return false
    end

    for index, value in next, workspace:GetDescendants() do
		if value.Name:sub(-4, -1) == "Door" then 
			local touch_part = value:FindFirstChild("Touch");
	
			if touch_part and touch_part:IsA("BasePart") then
				for distance = 5, 100, 5 do 
					local forward_position, backward_position = touch_part.Position + touch_part.CFrame.LookVector * (distance + 3), touch_part.Position + touch_part.CFrame.LookVector * -(distance + 3); -- distance + 3 studs forward and backward from the door
					
					if not Raycast(forward_position, Vector3.new(0, y_level, 0)) then -- if there is nothing above the forward position from the door
						table.insert(door_positions, { instance = value, position = forward_position });
	
						break;
					elseif not Raycast(backward_position, Vector3.new(0, y_level, 0)) then -- if there is nothing above the backward position from the door
						table.insert(door_positions, { instance = value, position = backward_position });
	
						break;
					end;
				end;
			end;
		end;
	end;

	local distance = math.huge;
    local nearest;

    local tried = tried or { };
    
    for index, value in next, door_positions do -- find the nearest position in our list of positions without collision above
        if not table.find(tried, value) then
            local magnitude = (value.position - game:GetService("Players").LocalPlayer.Character.PrimaryPart.Position).Magnitude;
            
            if magnitude < distance then 
                distance = magnitude;
                nearest = value;
            end;
        end;
    end;

    table.insert(tried, nearest);

    local path = game:GetService("PathfindingService"):CreatePath({WaypointSpacing = Settings.player_speed});
    path:ComputeAsync(game:GetService("Players").LocalPlayer.Character.PrimaryPart.Position, nearest.position);

    if path.Status == Enum.PathStatus.Success then -- if path making is successful
        local waypoints = path:GetWaypoints();

        for index = 1, #waypoints do 
            local waypoint = waypoints[index];
            
            game:GetService("Players").LocalPlayer.Character.PrimaryPart.CFrame = CFrame.new(waypoint.Position + Vector3.new(0, 2.5, 0)); -- walking movement is less optimal

            if Raycast(game:GetService("Players").LocalPlayer.Character.PrimaryPart.Position, Vector3.new(0, y_level, 0)) == nil then
                return;
            end

            task.wait(0.01);
        end;
    else
		game:GetService("Players").LocalPlayer.Character:FindFirstChild("Humanoid").Health = 0
    end;

    FindD(tried)
end

function Pathfind(cframe)
    if Arrested() or Halt then
		return false
    end

    local path = game:GetService("PathfindingService"):CreatePath({WaypointSpacing = Settings.player_speed});
    path:ComputeAsync(game:GetService("Players").LocalPlayer.Character.PrimaryPart.Position, cframe.Position);

    if path.Status == Enum.PathStatus.Success then -- if path making is successful
        local waypoints = path:GetWaypoints();

        for index = 1, #waypoints do 
            local waypoint = waypoints[index];
            
            game:GetService("Players").LocalPlayer.Character.PrimaryPart.CFrame = CFrame.new(waypoint.Position + Vector3.new(0, 2.5, 0)); -- walking movement is less optimal

            task.wait(0.01);
        end;
    end;

    game:GetService("Players").LocalPlayer.Character:PivotTo(cframe)
end

function GoToGround()
    local result = Raycast(game:GetService("Players").LocalPlayer.Character.PrimaryPart.Position, Vector3.new(0, -999, 0))
    task.wait()
    if result then
        game:GetService("Players").LocalPlayer.Character:PivotTo(CFrame.new(game:GetService("Players").LocalPlayer.Character.PrimaryPart.Position.x, result.Position.y + 2, game:GetService("Players").LocalPlayer.Character.PrimaryPart.Position.z)) 
    end
end

function Slide(cframe, tptype)
	if Arrested() or Halt then
		return false
    end

	game:GetService("Players").LocalPlayer.Character:FindFirstChild("Humanoid"):SetStateEnabled("FallingDown", false)
	local LagCheck = LagCheck(game:GetService("Players").LocalPlayer.Character.PrimaryPart)
	local LagbackCount = 0
	local Success = true
	local StartPos = (cframe - cframe.p) + game:GetService("Players").LocalPlayer.Character.PrimaryPart.Position
	local distance = cframe.p - game:GetService("Players").LocalPlayer.Character.PrimaryPart.Position

    if tptype == "Player" then
        for mc = 0, distance.Magnitude, Settings.player_speed do
            if LaggedBack then
                LagbackCount = LagbackCount + 1
                task.wait(.5)
                if LagbackCount == 5 then
                    game:GetService("Players").LocalPlayer.Character:FindFirstChild("Humanoid").Health = 0
                    LagCheck:Stop()
                    Success = false
                    break
                end
            end
            game:GetService("Players").LocalPlayer.Character:PivotTo(StartPos + distance.Unit * mc)
            game:GetService("Players").LocalPlayer.Character.PrimaryPart.Velocity, game:GetService("Players").LocalPlayer.Character.PrimaryPart.RotVelocity = Vector3.new(), Vector3.new()
            task.wait()
        end
    elseif tptype == "Car" then
        for mc = 0, distance.Magnitude, Settings.car_speed do
            if LaggedBack then
                LagbackCount = LagbackCount + 1
                task.wait(.5)
                if LagbackCount == 5 then
                    game:GetService("Players").LocalPlayer.Character:FindFirstChild("Humanoid").Health = 0
                    LagCheck:Stop()
                    Success = false
                    break
                end
            end
            game:GetService("Players").LocalPlayer.Character:PivotTo(StartPos + distance.Unit * mc)
            GetVehicleModel().PrimaryPart.Velocity, GetVehicleModel().PrimaryPart.RotVelocity = Vector3.new(), Vector3.new()
            task.wait()
        end
    elseif tptype == "Heli" then
        for mc = 0, distance.Magnitude, Settings.heli_speed do
            if LaggedBack then
                LagbackCount = LagbackCount + 1
                task.wait(.5)
                if LagbackCount == 5 then
                    game:GetService("Players").LocalPlayer.Character:FindFirstChild("Humanoid").Health = 0
                    LagCheck:Stop()
                    Success = false
                    break
                end
            end
            game:GetService("Players").LocalPlayer.Character:PivotTo(StartPos + distance.Unit * mc)
            GetVehicleModel().PrimaryPart.Velocity, GetVehicleModel().PrimaryPart.RotVelocity = Vector3.new(), Vector3.new()
            task.wait()
        end
    end
	
	if Success then
        task.wait()
		game:GetService("Players").LocalPlayer.Character:PivotTo(cframe)
        task.wait()
		LagCheck:Stop()
    else
        return error()
	end

	return Success
end

function Travel(cframe, tptype)
    if Arrested() or Halt then
		return false
    end

    if Raycast(game:GetService("Players").LocalPlayer.Character.PrimaryPart.Position, Vector3.new(0, y_level, 0), Building) then
		FindD()
		task.wait()
	end

    game:GetService("Players").LocalPlayer.Character:PivotTo(CFrame.new(game:GetService("Players").LocalPlayer.Character.PrimaryPart.Position.X, y_level, game:GetService("Players").LocalPlayer.Character.PrimaryPart.Position.Z))
    Building.CanCollide = true
    Slide(CFrame.new(cframe.Position.X, y_level, cframe.Position.Z), tptype)
    game:GetService("Players").LocalPlayer.Character:PivotTo(CFrame.new(cframe.Position))
end

function EnterVehicle()
    if Arrested() or Halt then
		return false
    end

    if GetVehiclePacket() and table.find(Vehs, GetVehicleModel().Name) then
        return true
    else
        ExitCar()
    end

    local SortedCars = Vehicles:GetChildren()
	table.sort(SortedCars, function(v, v2) 
		local v3 = v.PrimaryPart or v:FindFirstChildWhichIsA("Part")
		local v4 = v2.PrimaryPart or v2:FindFirstChildWhichIsA("Part")
		if v3 ~= nil and v4 ~= nil then
			return DistanceXZ(v3.Position, game:GetService("Players").LocalPlayer.Character.PrimaryPart.Position) < DistanceXZ(v4.Position, game:GetService("Players").LocalPlayer.Character.PrimaryPart.Position)
		end
	end)

    for _, v in pairs(SortedCars) do        
		if v.PrimaryPart ~= nil and v.Seat.PlayerName.Value == "" and table.find(Vehs, v.Name) and not Raycast(v.PrimaryPart.Position, Vector3.new(0, y_level, 0)) then
			local enter_attempts = 1
			repeat
				if v and v.PrimaryPart and v:FindFirstChild("Seat") then
					if (game:GetService("Players").LocalPlayer.Character.PrimaryPart.Position - v.PrimaryPart.Position).Magnitude > 20 then
						Travel(v.Seat.CFrame + Vector3.new(0, 5, 0), "Player")
						task.wait(.5)
					end
					if v and v.PrimaryPart and v.Seat then
                        game:GetService("Players").LocalPlayer.Character:PivotTo(v.Seat.CFrame + Vector3.new(0, 5, 0))
						game:GetService("Players").LocalPlayer.Character.PrimaryPart.Velocity = Vector3.new(0, 0, 0)
						for _, spec in pairs(Modules.UI.CircleAction.Specs) do
							if spec.Part == v.Seat then
								spec:Callback(true)
							end
						end
					end
				end
				enter_attempts = enter_attempts + 1
				task.wait(.3)
			until GetVehiclePacket() or enter_attempts == 10 or v == nil or v.PrimaryPart == nil or v:FindFirstChild("Seat") == nil or Arrested() or Halt
			task.wait(.1)
			if GetVehiclePacket() then
				return true
			end
		end
		task.wait()
	end 
end

function EnterHelicopter()
    if Arrested() or Halt then
		return false
    end

    if GetVehiclePacket() and table.find(Helis, GetVehicleModel().Name) then
        return true
    else
        ExitCar()
    end

    local SortedCars = Vehicles:GetChildren()
	table.sort(SortedCars, function(v, v2) 
		local v3 = v.PrimaryPart or v:FindFirstChildWhichIsA("Part")
		local v4 = v2.PrimaryPart or v2:FindFirstChildWhichIsA("Part")
		if v3 ~= nil and v4 ~= nil then
			return DistanceXZ(v3.Position, game:GetService("Players").LocalPlayer.Character.PrimaryPart.Position) < DistanceXZ(v4.Position, game:GetService("Players").LocalPlayer.Character.PrimaryPart.Position)
		end
	end)

    for _, v in pairs(SortedCars) do        
		if v.PrimaryPart ~= nil and v.Seat.PlayerName.Value == "" and table.find(Helis, v.Name) and not Raycast(v.PrimaryPart.Position, Vector3.new(0, y_level, 0)) then
			local enter_attempts = 1
			repeat
				if v and v.PrimaryPart and v:FindFirstChild("Seat") then
					if (game:GetService("Players").LocalPlayer.Character.PrimaryPart.Position - v.PrimaryPart.Position).Magnitude > 20 then
						CarTravel(v.Seat.CFrame + Vector3.new(0, 5, 0), "Player")
						task.wait(.5)
                        ExitCar()
					end
					if v and v.PrimaryPart and v.Seat then
                        game:GetService("Players").LocalPlayer.Character:PivotTo(v.Seat.CFrame + Vector3.new(0, 5, 0))
						game:GetService("Players").LocalPlayer.Character.PrimaryPart.Velocity = Vector3.new(0, 0, 0)
						for _, spec in pairs(Modules.UI.CircleAction.Specs) do
							if spec.Part == v.Seat then
								spec:Callback(true)
							end
						end
					end
				end
				enter_attempts = enter_attempts + 1
				task.wait(.3)
			until GetVehiclePacket() or enter_attempts == 10 or v == nil or v.PrimaryPart == nil or v:FindFirstChild("Seat") == nil or Arrested() or Halt
			task.wait(.1)
			if GetVehiclePacket() then
				return true
			end
		end
		task.wait()
	end 
end

function CarTravel(cframe)
    if Arrested() or Halt then
		return false
    end

    if not GetVehiclePacket() then
		if DistanceXZ(game:GetService("Players").LocalPlayer.Character.PrimaryPart.Position, cframe.Position) < 150 then
			return Travel(cframe, "Player")
		end
		EnterVehicle()
	end

    if GetVehiclePacket() and table.find(Helis, GetVehicleModel().Name) then
        Travel(cframe, "Heli")
    elseif GetVehiclePacket() and table.find(Cars, GetVehicleModel().Name) then
        Travel(cframe, "Car")
    end
end

--// Other Functions

local punch = nil

for _, func in pairs(getgc(true)) do
	if type(func) == "function" and debug.getinfo(func).name == "attemptPunch" then
		punch = func
	end
end

function Arrested()
	if game:GetService("Players").LocalPlayer.PlayerGui.MainGui.CellTime.Visible == true or game:GetService("Players").LocalPlayer.Folder:FindFirstChild("Cuffed") then
		return true
	end
	return false
end

function ExitCar()
	repeat
		Modules.CharUtils.OnJump()
		task.wait()
	until not GetVehiclePacket()
	task.wait()
end

returnstring = function(ic)
	return tonumber((tostring(ic):gsub("%D", "")))
end

local CheckBag = function()
	local ic, jc = game:GetService("Players").LocalPlayer:WaitForChild("PlayerGui").RobberyMoneyGui.Container.Bottom.Progress.Amount.Text:match("(.-)/(.+)")
	return game:GetService("Players").LocalPlayer:WaitForChild("PlayerGui").RobberyMoneyGui.Enabled and ic and jc and returnstring(ic) >= returnstring(jc)
end

local CheckUranium = function()
    local PowerPlantRobberyGui = game:GetService("Players").LocalPlayer.PlayerGui:FindFirstChild("PowerPlantRobberyGui")

    if not PowerPlantRobberyGui then
        return 0
    end

    local Price = PowerPlantRobberyGui.Price

    return tonumber(Price.TextLabel.Text:gsub(",", ""):match("Uranium Value: $(%d+)"))
end

-- // NumberLink Solver
local function SecureRequest(Data)
    local IndexFired = false
    local Base = setmetatable({}, {
        __call = http.request,
        __index = function(_, Index)
            IndexFired = true
            if #string.split(debug.traceback()) ~= 1 then
                return "hhaahahah"
            end
            
            if debug.info(2, "f") ~= http.request then
                return "hhaahahah"
            end

            if coroutine.isyieldable() then
                return "hhaahahah"
            end

            return Data[Index]
        end
    })

    local Response = select(2, pcall(Base))

    if not IndexFired then
        return
    end

    return Response
end

function SolveNumberlink()
	if game:GetService("Players").LocalPlayer.PlayerGui:FindFirstChild("FlowGui") then
        repeat task.wait()
			local Success = false

			pcall(function()
				local GridCopy = {}

				for i = 1, #getupvalue(require(replicated_storage.Game.Robbery.PuzzleFlow).Init, 3).Grid do
					GridCopy[i] = {}
					for j = 1, #getupvalue(require(replicated_storage.Game.Robbery.PuzzleFlow).Init, 3).Grid[i] do
						GridCopy[i][j] = getupvalue(require(replicated_storage.Game.Robbery.PuzzleFlow).Init, 3).Grid[i][j] + 1
					end
				end

				local Body = SecureRequest({
					Url = "https://numberlink-solver-blitzisking.onrender.com/",
					Method = "POST",
					Body = game:GetService("HttpService"):JSONEncode({
						Matrix = GridCopy
					}),
					Headers = {
						["Content-Type"] = "application/json"
					}
				}).Body

				local Solution = game:GetService("HttpService"):JSONDecode(Body).Solution

				for i = 1, #Solution do
					for j = 1, #Solution[i] do
						Solution[i][j] = Solution[i][j] - 1
					end
				end

				local Pairs = {}

				for i = 1, #Solution do
					for j = 1, #Solution[i] do
						local Cell = Solution[i][j]
						local NeighborCount = 0
						for k = -1, 1 do
							for l = -1, 1 do
								local Neighbor = Solution[i + k] and Solution[i + k][j + l]
								if math.abs(k + l) == 1 and Neighbor and Neighbor == Cell then
									NeighborCount = NeighborCount + 1
								end
							end
						end
						if NeighborCount == 1 then
							if not Pairs[Cell] then
								Pairs[Cell] = {}
							end
		
							table.insert(Pairs[Cell], {
								Cell = Cell,
								i = i,
								j = j
							})
						end
					end
				end

				for i = 0, #Pairs do
					local Start = Pairs[i][1]
					local End = Pairs[i][2]
					local Current = Start

					for _ = 1, 50 do
						if not game:GetService("Players").LocalPlayer.PlayerGui:FindFirstChild("FlowGui") then
							break
						end

						for x = -1, 1 do
							for y = -1, 1 do
								local Cell = getupvalue(require(replicated_storage.Game.Robbery.PuzzleFlow).Init, 3).Grid[Current.i + x] and getupvalue(require(replicated_storage.Game.Robbery.PuzzleFlow).Init, 3).Grid[Current.i + x][Current.j + y]
								local SolvedCell = Solution[Current.i + x] and Solution[Current.i + x][Current.j + y]

								if math.abs(x + y) == 1 and SolvedCell == Start.Cell and (Cell == -1 or (Current.i + x == End.i and Current.j + y == End.j)) then
									getupvalue(require(replicated_storage.Game.Robbery.PuzzleFlow).Init, 3).Grid[Current.i + x][Current.j + y] = SolvedCell
									getupvalue(require(replicated_storage.Game.Robbery.PuzzleFlow).Init, 3):Draw()
									Current = {
										i = Current.i + x,
										j = Current.j + y
									}
									break
								end
							end
						end

						task.wait(.1)

						if Current and Current.i == End.i and Current.j == End.j then
							getupvalue(require(replicated_storage.Game.Robbery.PuzzleFlow).Init, 3).OnConnection()
							break
						end
					end
				end

				repeat
					task.wait()
				until not game:GetService("Players").LocalPlayer.PlayerGui:FindFirstChild("FlowGui")

				Success = true
			end, "SolveNumberlink")

			if not Success then
				getupvalue(require(replicated_storage.Game.Robbery.PuzzleFlow).Init, 3):Reset()
			end
		until not game:GetService("Players").LocalPlayer.PlayerGui:FindFirstChild("FlowGui")
	end
end

task.wait(.5)

--// Robbery Functions

Building = GetBuilding()

function Home()
    ChangeStatus("Getting a car")
    EnterVehicle()
    ChangeStatus("Going to home")
    CarTravel(CFrame.new(274.473419, 60, 853.257324))
    task.wait(0.15)
    if Building and Building.CanCollide == true then
        Building.CanCollide = false
    end
    ExitCar()
    for i = 1, 50 do
        game:GetService("Players").LocalPlayer.Character:PivotTo(CFrame.new(274.473419, 35, 853.257324))
    end
end

function RobJewelry()
    if game:GetService("Players").LocalPlayer.TeamColor == BrickColor.new("Bright orange") then
        ChangeStatus("Escaping")
        Travel(CFrame.new(-1058, 75, -1805), "Player")
		repeat 
			task.wait() 
		until game:GetService("Players").LocalPlayer.TeamColor ~= BrickColor.new("Bright orange")
	end

    ChangeStatus("Getting a car")
    EnterVehicle()
    ChangeStatus("Going to jewelry store")
    CarTravel(CFrame.new(139, 20, 1373))
    local oldCFrame = workspace.Jewelrys:GetChildren()[1].WindowEntry.LaserTouch.CFrame
	workspace.Jewelrys:GetChildren()[1].WindowEntry.LaserTouch.CFrame = game:GetService("Players").LocalPlayer.Character.PrimaryPart.CFrame
	task.wait(0.05)
	workspace.Jewelrys:GetChildren()[1].WindowEntry.LaserTouch.CFrame = oldCFrame
    task.wait(.1)
    disableTouch()
    ExitCar()
    for i = 1, 50 do
        game:GetService("Players").LocalPlayer.Character:PivotTo(CFrame.new(122, 19, 1325))
    end

    local function getNearestBox()
        local Boxes = workspace.Jewelrys:GetChildren()[1].Boxes:GetChildren()
        local nearest = nil
        local shortestDistance = math.huge
		local distance

        for i, v in pairs(Boxes) do
            distance = (v.Position - game:GetService("Players").LocalPlayer.Character.PrimaryPart.Position).magnitude
            if distance < shortestDistance and v.Transparency ~= 1 and v.Position.Y < 34 then
                nearest = v
                shortestDistance = distance
            end
        end

        if not nearest then
            for i, v in pairs(Boxes) do
                distance = (v.Position - game:GetService("Players").LocalPlayer.Character.PrimaryPart.Position).magnitude
                if distance < shortestDistance and v.Transparency ~= 1 then
                    nearest = v
                    shortestDistance = distance
                end
            end
        end

        return nearest
    end

    while not CheckBag() and CheckJewelry() and not Arrested() and not Halt do
        ChangeStatus("Robbing boxes")
        local CurrentBox = getNearestBox()

        if CurrentBox then
            local NextToBox = (CurrentBox.CFrame * CFrame.new(0, -3, 0)).p
		    local AboveBox  = (CurrentBox.CFrame + Vector3.new(0, 5, 0)).p

            if not Raycast(game:GetService("Players").LocalPlayer.Character.Head.Position, AboveBox - game:GetService("Players").LocalPlayer.Character.Head.Position) then
                if not Raycast(game:GetService("Players").LocalPlayer.Character.PrimaryPart.Position, NextToBox - game:GetService("Players").LocalPlayer.Character.PrimaryPart.Position) and DistanceXZ(game:GetService("Players").LocalPlayer.Character.PrimaryPart.Position, NextToBox) < 20 then
                    game:GetService("Players").LocalPlayer.Character.PrimaryPart.CFrame = CFrame.new(NextToBox, CurrentBox.Position)
                else
                    Pathfind(CFrame.new(NextToBox, CurrentBox.Position))
                end
            else
                Pathfind(CFrame.new(NextToBox, CurrentBox.Position))
            end
            punch()
        end

        task.wait()
    end

    ChangeStatus("Escaping")
    Middle()

    if game:GetService("Players").LocalPlayer.PlayerGui.RobberyMoneyGui.Enabled == true then
        ChangeStatus("Going to criminal base")
        CarTravel(CFrame.new(-310, 23, 1601))
        ChangeStatus("Selling")
        repeat 
			game:GetService("Players").LocalPlayer.Character:PivotTo(CFrame.new(-310, 23, 1601))
            if GetVehiclePacket() then
                GetVehicleModel().PrimaryPart.Velocity, GetVehicleModel().PrimaryPart.RotVelocity = Vector3.new(), Vector3.new()
            end
			task.wait(.1)
		until game:GetService("Players").LocalPlayer.PlayerGui.RobberyMoneyGui.Enabled == false
    end

    Robbery.Jewelry.Open = false
end

function RobPowerPlant()
    if game:GetService("Players").LocalPlayer.TeamColor == BrickColor.new("Bright orange") then
        ChangeStatus("Escaping")
        Travel(CFrame.new(-1058, 75, -1805), "Player")
		repeat 
			task.wait() 
		until game:GetService("Players").LocalPlayer.TeamColor ~= BrickColor.new("Bright orange")
	end

    ChangeStatus("Getting a car")
    EnterVehicle()
    ChangeStatus("Going to power plant")
    CarTravel(CFrame.new(60, 23, 2319))
    task.wait(.15)
    disableTouch()
    ExitCar()
    for i = 1, 50 do
        game:GetService("Players").LocalPlayer.Character:PivotTo(CFrame.new(89, 21, 2326))
    end
    ChangeStatus("Going to first puzzle")
    repeat 
        task.wait()
    until game:GetService("Players").LocalPlayer.PlayerGui:FindFirstChild("FlowGui") or not CheckPowerPlant() or Arrested() or Halt
    ChangeStatus("Solving first puzzle")
    SolveNumberlink()
    ChangeStatus("Going to second puzzle")
    local Points = { CFrame.new(93, 33, 2338), CFrame.new(210, 20, 2246), CFrame.new(149, -6, 2102), CFrame.new(119, -7, 2099) }
	for _, v in next, Points do
        if CheckPowerPlant() then
            Slide(v, "Player")
        end
	end
    repeat
        task.wait()
    until game:GetService("Players").LocalPlayer.PlayerGui:FindFirstChild("FlowGui") or not CheckPowerPlant() or Arrested() or Halt
    ChangeStatus("Solving second puzzle")
    SolveNumberlink()
    ChangeStatus("Escaping")
    if not game:GetService("Players").LocalPlayer.PlayerGui:FindFirstChild("PowerPlantRobberyGui") then
        if Raycast(game:GetService("Players").LocalPlayer.Character.PrimaryPart.Position, Vector3.new(0, y_level, 0)) then
            Middle()
        end
        Robbery.PowerPlant.Open = false
        return error()
    end
    local Points = { CFrame.new(91, -8, 2109), CFrame.new(59, -10, 2100), CFrame.new(35, -10, 2109), CFrame.new(28, -14, 2133), CFrame.new(39, -12, 2157), CFrame.new(55, -6, 2185), CFrame.new(60, -1, 2211), CFrame.new(91, 13, 2249), CFrame.new(98, 24, 2275), CFrame.new(73, 21, 2293), CFrame.new(61, 21, 2302) }
	for _, v in next, Points do
		if CheckPowerPlant() then
            Slide(v, "Player")
        end
	end
    if game:GetService("Players").LocalPlayer.PlayerGui:FindFirstChild("PowerPlantRobberyGui") then
        ChangeStatus("Going to volcano base")
        CarTravel(CFrame.new(2197, 81, -2578))
	    platform.CFrame = CFrame.new(2197, 74, -2578)
        ChangeStatus("Waiting to sell")
        repeat
            task.wait()
        until CheckUranium() <= 6450
        platform.CFrame = CFrame.new(0, 0, 0)
        ChangeStatus("Selling")
        if GetVehiclePacket() then
            Slide(CFrame.new(2293.27295, 74, -2592.20801), "Car")
        else
            Slide(CFrame.new(2293.27295, 74, -2592.20801), "Player")
        end
        repeat 
            game:GetService("Players").LocalPlayer.Character:PivotTo(CFrame.new(2293.27295, 40, -2592.20801))
            if GetVehiclePacket() then
                GetVehicleModel().PrimaryPart.Velocity, GetVehicleModel().PrimaryPart.RotVelocity = Vector3.new(), Vector3.new()
            end
            task.wait(.1)
        until game:GetService("Players").LocalPlayer.PlayerGui:FindFirstChild("PowerPlantRobberyGui") == nil
        ChangeStatus("Escaping")
        game:GetService("Players").LocalPlayer.Character:PivotTo(CFrame.new(2293.27295, 74, -2592.20801))
        if GetVehiclePacket() then
            Slide(CFrame.new(2197, 81, -2578), "Car")
        else
            Slide(CFrame.new(2197, 81, -2578), "Player")
        end
    end

    Robbery.PowerPlant.Open = false
end

function RobCasino()
    if game:GetService("Players").LocalPlayer.TeamColor == BrickColor.new("Bright orange") then
        ChangeStatus("Escaping")
        Travel(CFrame.new(-1058, 75, -1805), "Player")
		repeat 
			task.wait() 
		until game:GetService("Players").LocalPlayer.TeamColor ~= BrickColor.new("Bright orange")
	end

    local computersHacked = false
    local HackedVault = false

    ChangeStatus("Getting a car")
    EnterVehicle()
    ChangeStatus("Going to casino")
    CarTravel(CFrame.new(-47, 135, -4664))
    task.wait(.15)
    disableTouch()
    ExitCar()
    for i = 1, 50 do
        game:GetService("Players").LocalPlayer.Character:PivotTo(CFrame.new(-47, 75, -4664))
    end
    repeat
        task.wait()
    until workspace:FindFirstChild("Casino") and workspace.Casino:FindFirstChild("Computers")
    for i,v in pairs(workspace.Casino.Computers:GetChildren()) do
        if v:IsA("Model") and v.Name == "Computer" then
            if v.PrimaryPart.BrickColor == BrickColor.new("Lime green") then
                computersHacked = true
            end
        end
    end

    if computersHacked == false then
        ChangeStatus("Hacking computers")
        while not computersHacked do
            local computers = {}

            for i,v in pairs(workspace.Casino.Computers:GetChildren()) do
                if v:GetAttribute("ShowDisableSecurityPrompt") and not v:GetAttribute("ComputerActive") then
                    computersHacked = true
                elseif v:GetAttribute("ComputerActive") then
                    table.insert(computers, v)
                end
            end

            if computersHacked then
                break
            end

            table.sort(computers, function(a, b)
                return (game:GetService("Players").LocalPlayer.Character.PrimaryPart.Position - a.Display.Position).Magnitude < (game:GetService("Players").LocalPlayer.Character.PrimaryPart.Position - b.Display.Position).Magnitude
            end)

            repeat
                if DistanceXZ(game:GetService("Players").LocalPlayer.Character.PrimaryPart.Position, computers[1].Display.Position) < 20 then
                    game:GetService("Players").LocalPlayer.Character.PrimaryPart.CFrame = CFrame.new(computers[1].Display.Position + Vector3.new(0, 5, 0))
                else
                    Slide(CFrame.new(computers[1].Display.Position + Vector3.new(0, 5, 0)), "Player")
                end
                
                computers[1].CasinoComputerHack:FireServer()

                task.wait()
            until not computers[1]:GetAttribute("ComputerActive") or computers[1]:GetAttribute("ShowDisableSecurityPrompt")

            if computers[1]:GetAttribute("ShowDisableSecurityPrompt") then
                computers[1].CasinoComputerHack:FireServer()

                computersHacked = true
            end

            task.wait()
        end
    end

    if workspace.Casino.Elevator:FindFirstChild("Car") then
        workspace.Casino.Elevator:FindFirstChild("Car"):Destroy()
    end

    ChangeStatus("Going to vault")
    local Points = { CFrame.new(-47, 75, -4646), CFrame.new(-63, 71, -4706), CFrame.new(-14, 71, -4742), CFrame.new(-18, 71, -4755), CFrame.new(-18, -77, -4755), CFrame.new(-14, -77, -4741), CFrame.new(9, -77, -4747) }
    for _, v in next, Points do
		if CheckCasino() then
            Slide(v, "Player")
        end
	end
    task.wait(.2)
    ChangeStatus("Breaking glass")
    for i,v in pairs(workspace.Casino:GetDescendants()) do
        if v:IsA("Part") and v.Name == "Glass" then
            v.CutRemote:FireServer()
        end
    end
    task.wait(.5)
    ChangeStatus("Going to vault")
    local Points = { CFrame.new(26, -77, -4751), CFrame.new(49, -77, -4668), CFrame.new(9, -77, -4657), CFrame.new(26, -77, -4597), CFrame.new(46, -77, -4565), CFrame.new(76, -77, -4541), CFrame.new(113, -77, -4529), CFrame.new(141, -77, -4527) }
    for _, v in next, Points do
		if CheckCasino() then
            Slide(v, "Player")
        end
	end

    local LED = game:GetService("Workspace").Casino and game:GetService("Workspace").Casino.HackableVaults.VaultDoorMain.InnerModel.Model.UnlockedLED

    if LED.CFrame.X < 179.7 then	
        HackedVault = true
    end

    if HackedVault == false and CheckCasino() then
        ChangeStatus("Hacking vault")
        local LED = game:GetService("Workspace").Casino.HackableVaults.VaultDoorMain.InnerModel.Model.UnlockedLED
        local Attempts  = 0

        repeat
            for i, v in next, Modules.UI.CircleAction.Specs do
                if v.Name == "Crack" then
                    v:Callback(true)
                end
            end

            if LED.BrickColor == BrickColor.new("Lime green") then
                for i, v in next, Modules.UI.CircleAction.Specs do
                    if v.Name == "Change Direction" then
                        v:Callback(true)
                    end
                end

                repeat task.wait() until LED.BrickColor == BrickColor.new("Really red")
            end

            Attempts = Attempts + wait()
        until LED.CFrame.X < 179.7 or not CheckCasino() or Arrested() or Halt or Attempts > 30

        if not CheckCasino() or Arrested() or Halt or Attempts > 30 then
            if Raycast(game:GetService("Players").LocalPlayer.Character.PrimaryPart.Position, Vector3.new(0, y_level, 0)) then
                Middle()
            end
            Robbery.Casino.Open = false
            return error()
        end
    end

    ChangeStatus("Robbing money")
    Slide(CFrame.new(199, -70, -4527), "Player")

    while not CheckBag() and CheckCasino() and not Arrested() and not Halt do
        local moneyTable = {}

        for i,v in pairs(workspace.Casino.Loots:GetChildren()) do
            if v.Name == "Casino_Cash" and not Raycast(game:GetService("Players").LocalPlayer.Character.PrimaryPart.Position, (v.Position + Vector3.new(0, 5, 0)) - game:GetService("Players").LocalPlayer.Character.PrimaryPart.Position) then
                table.insert(moneyTable, v)
            end
        end

        table.sort(moneyTable, function(a, b)
            return (a.Position - game:GetService("Players").LocalPlayer.Character.PrimaryPart.Position).Magnitude < (b.Position - game:GetService("Players").LocalPlayer.Character.PrimaryPart.Position).Magnitude
        end)

        if not moneyTable[1] then
            ChangeStatus("No money avalible")
            task.wait(.5)
            break
        end

        repeat
            if DistanceXZ(game:GetService("Players").LocalPlayer.Character.PrimaryPart.Position, moneyTable[1].Position) < 20 then
                game:GetService("Players").LocalPlayer.Character.PrimaryPart.CFrame = CFrame.new(moneyTable[1].Position + Vector3.new(0, 5, 0))
            else
                Pathfind(CFrame.new(moneyTable[1].Position + Vector3.new(0, 5, 0)))
            end

            moneyTable[1].CasinoLootCollect:FireServer()

            task.wait()
        until moneyTable[1].Parent ~= workspace.Casino.Loots or CheckBag() or not CheckCasino() or Arrested() or Halt

        task.wait()
    end

    ChangeStatus("Escaping")
    local Points = { CFrame.new(251, -71, -4527), CFrame.new(141, -77, -4527), CFrame.new(113, -77, -4529), CFrame.new(76, -77, -4541), CFrame.new(46, -77, -4565), CFrame.new(26, -77, -4597), CFrame.new(9, -77, -4657), CFrame.new(49, -77, -4668), CFrame.new(26, -77, -4751) }
	for _, v in next, Points do
		if CheckCasino() then
            Slide(v, "Player")
        end
	end
    task.wait(.2)
    ChangeStatus("Breaking glass")
    for i,v in pairs(workspace.Casino:GetDescendants()) do
        if v:IsA("Part") and v.Name == "Glass" then
            v.CutRemote:FireServer()
        end
    end
    task.wait(.5)
    ChangeStatus("Escaping")
    local Points = { CFrame.new(9, -77, -4747), CFrame.new(-14, -77, -4741), CFrame.new(-18, -77, -4755), CFrame.new(-18, 155, -4755), CFrame.new(-12, 155, -4736), CFrame.new(33, 155, -4739) }
    for _, v in next, Points do
		if CheckCasino() then
            Slide(v, "Player")
        end
	end
    
    if Raycast(game:GetService("Players").LocalPlayer.Character.PrimaryPart.Position, Vector3.new(0, y_level, 0)) then
        Middle()
    end

    if game:GetService("Players").LocalPlayer.PlayerGui.RobberyMoneyGui.Enabled == true then
        if DistanceXZ(game:GetService("Players").LocalPlayer.Character.PrimaryPart.Position, Vector3.new(-310, 23, 1601)) < DistanceXZ(game:GetService("Players").LocalPlayer.Character.PrimaryPart.Position, Vector3.new(2197, 81, -2578)) then
            ChangeStatus("Going to criminal base")
            CarTravel(CFrame.new(-310, 23, 1601))
            ChangeStatus("Selling")
            repeat 
                game:GetService("Players").LocalPlayer.Character:PivotTo(CFrame.new(-310, 23, 1601))
                if GetVehiclePacket() then
                    GetVehicleModel().PrimaryPart.Velocity, GetVehicleModel().PrimaryPart.RotVelocity = Vector3.new(), Vector3.new()
                end
                task.wait(.1)
            until game:GetService("Players").LocalPlayer.PlayerGui.RobberyMoneyGui.Enabled == false
        else
            ChangeStatus("Going to volcano base")
            CarTravel(CFrame.new(2197, 81, -2578))
            platform.CFrame = CFrame.new(0, 0, 0)
            ChangeStatus("Selling")
            if GetVehiclePacket() then
                Slide(CFrame.new(2293.27295, 74, -2592.20801), "Car")
            else
                Slide(CFrame.new(2293.27295, 74, -2592.20801), "Player")
            end
            repeat 
                game:GetService("Players").LocalPlayer.Character:PivotTo(CFrame.new(2293.27295, 40, -2592.20801))
                if GetVehiclePacket() then
                    GetVehicleModel().PrimaryPart.Velocity, GetVehicleModel().PrimaryPart.RotVelocity = Vector3.new(), Vector3.new()
                end
                task.wait(.1)
            until game:GetService("Players").LocalPlayer.PlayerGui.RobberyMoneyGui.Enabled == false
            ChangeStatus("Escaping")
            game:GetService("Players").LocalPlayer.Character:PivotTo(CFrame.new(2293.27295, 74, -2592.20801))
            if GetVehiclePacket() then
                Slide(CFrame.new(2197, 81, -2578), "Car")
            else
                Slide(CFrame.new(2197, 81, -2578), "Player")
            end
        end
    end

    Robbery.Casino.Open = false
end

function RobPassengerTrain()
    if game:GetService("Players").LocalPlayer.TeamColor == BrickColor.new("Bright orange") then
        ChangeStatus("Escaping")
        Travel(CFrame.new(-1058, 75, -1805), "Player")
		repeat 
			task.wait() 
		until game:GetService("Players").LocalPlayer.TeamColor ~= BrickColor.new("Bright orange")
	end

    if DistanceXZ(Vector3.new(2197, 81, -2578), game:GetService("Players").LocalPlayer.Character.PrimaryPart.Position) < 50 then
        game:GetService("Players").LocalPlayer.Character:PivotTo(CFrame.new(game:GetService("Players").LocalPlayer.Character.PrimaryPart.Position.X, home_level, game:GetService("Players").LocalPlayer.Character.PrimaryPart.Position.Z))
        platform.CFrame = CFrame.new(game:GetService("Players").LocalPlayer.Character.PrimaryPart.Position.X, home_level - 7, game:GetService("Players").LocalPlayer.Character.PrimaryPart.Position.Z)
        if GetVehiclePacket() then
            GetVehicleModel().PrimaryPart.Velocity, GetVehicleModel().PrimaryPart.RotVelocity = Vector3.new(), Vector3.new()
        end
        task.wait(.1)
    end

    for i, v in next, Modules.UI.CircleAction.Specs do
		if v.Name:match("Grab") and v.Part:IsDescendantOf(workspace.Trains) then
			ChangeStatus("Robbing items")
			if CheckBag() or not CheckPassengerTrain() then
				break
			end
			v:Callback(true)
			task.wait(1.1)
		end
	end
	task.wait()
	if game:GetService("Players").LocalPlayer.PlayerGui.RobberyMoneyGui.Enabled == true then
		ChangeStatus("Going to volcano base")
        CarTravel(CFrame.new(2197, 81, -2578))
        platform.CFrame = CFrame.new(0, 0, 0)
        ChangeStatus("Selling")
        if GetVehiclePacket() then
            Slide(CFrame.new(2293.27295, 74, -2592.20801), "Car")
        else
            Slide(CFrame.new(2293.27295, 74, -2592.20801), "Player")
        end
        repeat 
            game:GetService("Players").LocalPlayer.Character:PivotTo(CFrame.new(2293.27295, 40, -2592.20801))
            if GetVehiclePacket() then
                GetVehicleModel().PrimaryPart.Velocity, GetVehicleModel().PrimaryPart.RotVelocity = Vector3.new(), Vector3.new()
            end
            task.wait(.1)
        until game:GetService("Players").LocalPlayer.PlayerGui.RobberyMoneyGui.Enabled == false
        ChangeStatus("Escaping")
        game:GetService("Players").LocalPlayer.Character:PivotTo(CFrame.new(2293.27295, 74, -2592.20801))
        if GetVehiclePacket() then
            Slide(CFrame.new(2197, 81, -2578), "Car")
        else
            Slide(CFrame.new(2197, 81, -2578), "Player")
        end
	end
	Robbery.PassengerTrain.Open = false
end

while task.wait() do
    if autoRobToggled == true then
        if CheckJewelry() then
            RobJewelry()
        elseif CheckPowerPlant() then
            RobPowerPlant()
        elseif CheckPassengerTrain() then
            RobPassengerTrain()
        elseif CheckCasino() then
            RobCasino()
        else
            if (game:GetService("Players").LocalPlayer.Character.PrimaryPart.Position - Vector3.new(274.473419, 25, 853.257324)).Magnitude > 15 then
                Home()
            end
            ChangeStatus("Waiting for stores to open"..string.rep('.', dots % 3 + 1))
            dots += 1
            task.wait(0.5)
        end
    else
        ChangeStatus("Disabled")
    end
end
